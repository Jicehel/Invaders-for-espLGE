// Tuto Space invader - Use event's procedures: After a fix in EspLGE, program changed to use event's procedure 

/*settings*{"name":"Space_Invad","author":"Jicehel","image":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,7,119,7,112,0,112,0,119,7,119,0,0,112,0,7,7,7,7,7,0,7,0,0,0,7,112,7,7,7,7,7,0,7,112,0,0,0,7,7,112,7,119,7,0,7,0,0,0,119,112,7,0,7,7,0,119,7,119,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,112,7,7,0,7,0,112,7,112,0,0,112,119,7,7,0,7,0,112,7,7,0,0,112,119,119,0,112,112,7,7,7,7,0,0,112,112,119,0,112,112,7,119,7,7,0,0,112,112,7,0,7,0,7,7,7,112,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]}*/


//===============================================================================================
// define constantes


// Sprites used

// 0  -> 5 	invaders columns 
// 6  -> 7 	reserved for invaders columns extension
// 8 	  	player ship
// 9  -> 14	ship shots
// 15 -> 24 invaders shots
// 25 -> 27 bunkers

// invaders constantes
	
int invader_init_speed = 3;			// set speed moves of invaders
int speed_invader_down = 5;			// set speed to go down when a limit of the screen is reach
int invader_lines = 4;				// set number of invaders rows
int invader_columns = 6;			// set number of invaders coumns
int invader_x =	0;					// set initial horizontal position of the top left column of invaders
int invader_y = 20;					// set initial vertical position of the top line of invaders
int sprite_invader = 0;			  	// max sprite invader = 7 if we can create 8 columns max
int invader_w = 8;					// width of invader sprite
int invader_h =	8;					// height of invader sprite
int invader_space_w = 2;			// horizontal space between 2 columns of invaders
int invader_space_h = 2;			// vertical space between 2 rows of invaders
int timer_invaders = 2;				// Number of the timer used to delay invaders moves

// invaders shot constantes			
int timer_invaders_shot = 3;		// Number of timer used to delay 2 shots
int sprite_invaders_shot = 15;      // Number of the sprite of the first invader shot
int invader_shot_speed = 2;
int timer_invader_shot_move = 5;
int max_invader_shot = 10;


// player constantes
int sprite_player = 8;				// Number of the sprite of the ship of the player
int player_init_x = 58;				// Initial position of the player ship
int player_y = 105;					// Vertical position of the player ship
int player_w = 12;
int player_h = 8;


// player shots constantes
int max_shot = 6;					// Easy to understand with the name of the variable, no ?
int sprite_shot = 9;   				// max sprite shot = 22
int shot_speed = 3;         		// speed of the shot move
int timer_ship_shot = 1;			// Timer of the cooldown time between two player's shots
int timer_shot_move = 4;			// Timer between shot moves


// bunkers constantes
int sprite_bunkers = 25;
int bunker_w = 16;
int bunker_h = 12;
int y_bunkers = 88;


// game constantes
int screen_width = 128;
int screen_height = 128;

//===============================================================================================
// Sprites


// Invader 8 pixels x 8 pixels x 5 rows x 2 frames with 2 separation lines between rows 

char invader[]= {
0x00, 0x70, 0x07, 0x00, 
0x00, 0x77, 0x77, 0x00, 
0x07, 0x77, 0x77, 0x70, 
0x07, 0x77, 0x77, 0x70, 
0x77, 0x07, 0x70, 0x77, 
0x77, 0x77, 0x77, 0x77, 
0x07, 0x70, 0x07, 0x70, 
0x07, 0x00, 0x00, 0x70, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x05, 0x50, 0x00, 
0x00, 0x55, 0x55, 0x00, 
0x05, 0x55, 0x55, 0x50, 
0x55, 0x05, 0x50, 0x55, 
0x55, 0x55, 0x55, 0x55, 
0x00, 0x50, 0x05, 0x00, 
0x05, 0x05, 0x50, 0x50, 
0x50, 0x50, 0x05, 0x05, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x05, 0x50, 0x00, 
0x00, 0x55, 0x55, 0x00, 
0x05, 0x55, 0x55, 0x50, 
0x55, 0x05, 0x50, 0x55, 
0x55, 0x55, 0x55, 0x55, 
0x00, 0x50, 0x05, 0x00, 
0x05, 0x00, 0x00, 0x50, 
0x00, 0x50, 0x05, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x60, 0x06, 0x00, 
0x00, 0x06, 0x60, 0x00, 
0x06, 0x66, 0x66, 0x60, 
0x06, 0x06, 0x60, 0x60, 
0x60, 0x66, 0x66, 0x06, 
0x66, 0x00, 0x00, 0x66, 
0x60, 0x60, 0x06, 0x06, 
0x06, 0x00, 0x00, 0x60, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x60, 0x60, 0x06, 0x06, 
0x60, 0x06, 0x60, 0x06, 
0x66, 0x66, 0x66, 0x66, 
0x66, 0x06, 0x60, 0x66, 
0x00, 0x66, 0x66, 0x00, 
0x06, 0x00, 0x00, 0x60, 
0x06, 0x60, 0x06, 0x60, 
0x66, 0x00, 0x00, 0x66, 
0x00, 0x70, 0x07, 0x00, 
0x00, 0x77, 0x77, 0x00, 
0x07, 0x77, 0x77, 0x70, 
0x07, 0x77, 0x77, 0x70, 
0x77, 0x07, 0x70, 0x77, 
0x77, 0x77, 0x77, 0x77, 
0x07, 0x70, 0x07, 0x70, 
0x07, 0x00, 0x00, 0x70, 
0x70, 0x00, 0x00, 0x07, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x05, 0x50, 0x00, 
0x00, 0x55, 0x55, 0x00, 
0x05, 0x55, 0x55, 0x50, 
0x55, 0x05, 0x50, 0x55, 
0x55, 0x55, 0x55, 0x55, 
0x00, 0x50, 0x05, 0x00, 
0x05, 0x00, 0x00, 0x50, 
0x00, 0x50, 0x05, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x05, 0x50, 0x00, 
0x00, 0x55, 0x55, 0x00, 
0x05, 0x55, 0x55, 0x50, 
0x55, 0x05, 0x50, 0x55, 
0x55, 0x55, 0x55, 0x55, 
0x00, 0x50, 0x05, 0x00, 
0x05, 0x05, 0x50, 0x50, 
0x50, 0x50, 0x05, 0x05, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x60, 0x60, 0x06, 0x06, 
0x60, 0x06, 0x60, 0x06, 
0x66, 0x66, 0x66, 0x66, 
0x66, 0x06, 0x60, 0x66, 
0x00, 0x66, 0x66, 0x00, 
0x06, 0x60, 0x06, 0x60, 
0x66, 0x00, 0x00, 0x66, 
0x00, 0x60, 0x06, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x00, 
0x00, 0x06, 0x60, 0x00, 
0x06, 0x66, 0x66, 0x60, 
0x06, 0x06, 0x60, 0x60, 
0x60, 0x66, 0x66, 0x06, 
0x66, 0x00, 0x00, 0x66, 
0x60, 0x60, 0x06, 0x06, 
0x06, 0x00, 0x00, 0x60, 
0x06, 0x00, 0x00, 0x60  
};


char player[]= {
0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x26, 0x62, 0x00, 0x00, 
0x00, 0x00, 0x63, 0x16, 0x00, 0x00, 
0x00, 0x02, 0x63, 0x16, 0x20, 0x00, 
0x02, 0x21, 0x63, 0x36, 0x12, 0x20, 
0x21, 0xc1, 0x26, 0x62, 0x1c, 0x12, 
0x21, 0xc2, 0x22, 0x22, 0x2c, 0x12, 
0x22, 0x20, 0x07, 0x70, 0x02, 0x22, 
0x00, 0x00, 0x01, 0x10, 0x00, 0x00, 
0x00, 0x00, 0x26, 0x62, 0x00, 0x00, 
0x00, 0x00, 0x63, 0x16, 0x00, 0x00, 
0x00, 0x02, 0x63, 0x16, 0x20, 0x00, 
0x02, 0x21, 0x63, 0x36, 0x12, 0x20, 
0x21, 0xc1, 0x26, 0x62, 0x1c, 0x12, 
0x21, 0xc2, 0x27, 0x72, 0x2c, 0x12, 
0x22, 0x20, 0x02, 0x20, 0x02, 0x22, 
0x00, 0x02, 0x10, 0x66, 0x20, 0x02, 
0x01, 0x07, 0x21, 0x27, 0x00, 0x00, 
0x00, 0x06, 0x27, 0x72, 0x26, 0x00, 
0x00, 0x02, 0x72, 0x27, 0x60, 0x00, 
0x02, 0x07, 0x07, 0x72, 0x00, 0x20, 
0x21, 0x00, 0x23, 0x72, 0x00, 0x12, 
0x21, 0xc0, 0x26, 0x06, 0x01, 0x12, 
0x22, 0x20, 0x00, 0x00, 0x00, 0x22, 
0x02, 0x00, 0x70, 0x00, 0x76, 0x00, 
0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 
0x63, 0x00, 0x00, 0x02, 0x00, 0x00, 
0x00, 0x07, 0x00, 0x20, 0x07, 0x00, 
0x00, 0x00, 0x70, 0x00, 0x00, 0x00, 
0x00, 0x00, 0x00, 0x07, 0x00, 0x00, 
0x00, 0x70, 0x00, 0x00, 0x20, 0x00, 
0x00, 0x72, 0x00, 0x60, 0x06, 0x02
};


char bunker_spr[]= {
0x00, 0x00, 0x55, 0x55, 0x55, 0x55, 0x00, 0x00, 
0x00, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x00, 
0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 
0x05, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x50, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 
0x55, 0x55, 0x50, 0x00, 0x00, 0x05, 0x55, 0x55, 
0x55, 0x55, 0x00, 0x00, 0x00, 0x00, 0x55, 0x55, 
0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 
0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55, 
0x55, 0x50, 0x00, 0x00, 0x00, 0x00, 0x05, 0x55
};


char shot_beam[] = {
0x20, 
0x02, 
0x20, 
0x02, 
0x02, 
0x20, 
0x02, 
0x20
};

char invader_shot_beam[] = {
0x70, 
0x07, 
0x70, 
0x07, 
0x07, 
0x70, 
0x07, 
0x70
};

char background[] = {/*rle:128:128*/0x7e,0x0,0x7e,0x0,0x7e,0x0,0x6f,0x0,0x82,0x10,0x7e,0x0,0x2e,0x0,0x82,0xc,0x48,0x0,0x82,0x1,0x46,0x0,0x82,0x70,0x17,0x0,0x82,0x7,0x26,0x0,0x83,0x7,0x77,0x15,0x0,0x82,0x70,0x29,0x0,0x82,0x70,0xf,0x0,0x82,0xc,0x10,0x0,0x82,0x22,0x27,0x0,0x82,0xc,0xa,0x0,0x82,0x10,0xc,0x0,0x84,0x2b,0x27,0x72,0x33,0x0,0x82,0x1,0x9,0x0,0x82,0x2b,0x2,0x77,0x3d,0x0,0x84,0x2,0x27,0x77,0x5,0x0,0x82,0x10,0x12,0x0,0x82,0x1,0x24,0x0,0x84,0x2,0x22,0x7b,0x4,0x0,0x83,0x1,0x11,0x24,0x0,0x82,0x10,0x2,0x0,0x82,0x1,0xf,0x0,0x85,0x7,0x22,0x2b,0x20,0x4,0x0,0x82,0x10,0x4,0x0,0x83,0x2,0x20,0x24,0x0,0x84,0xc,0x0,0x1,0xc,0x0,0x83,0x22,0x20,0x9,0x0,0x2,0x22,0x1f,0x0,0x82,0xc,0x1e,0x0,0x83,0x2a,0x22,0x5,0x0,0x82,0x10,0xc,0x0,0x82,0xc0,0x2b,0x0,0x83,0x2,0x20,0x21,0x0,0x84,0x2,0x0,0x1,0x48,0x0,0x82,0x1,0x2e,0x0,0x82,0x10,0x1d,0x0,0x82,0x10,0x16,0x0,0x82,0x1,0x38,0x0,0x82,0x10,0xe,0x0,0x82,0x70,0x6,0x0,0x82,0xc,0xd,0x0,0x82,0x70,0x38,0x0,0x82,0xc,0x33,0x0,0x82,0x10,0x6,0x0,0x82,0xc,0x7e,0x0,0x79,0x0,0x82,0x1,0x48,0x0,0x83,0x4c,0xc0,0x31,0x0,0x82,0x10,0xb,0x0,0x84,0xb,0x44,0xcc,0x2,0x0,0x82,0xc,0xc,0x0,0x82,0x10,0x2d,0x0,0x84,0xb,0xb4,0xcc,0x2d,0x0,0x82,0x7,0xb,0x0,0x82,0xc0,0x3,0x0,0x84,0xb,0xbb,0x4c,0x21,0x0,0x82,0x10,0x1c,0x0,0x83,0xbb,0xb0,0x8,0x0,0x82,0x1,0x21,0x0,0x82,0x10,0xb,0x0,0x82,0x10,0x3,0x0,0x83,0x1,0x10,0x5f,0x0,0x82,0x1,0x16,0x0,0x82,0x1,0x15,0x0,0x82,0x10,0x7e,0x0,0x25,0x0,0x82,0x1,0x1e,0x0,0x82,0x1,0x25,0x0,0x82,0x1,0x3,0x0,0x82,0x7,0x15,0x0,0x83,0x11,0x10,0x16,0x0,0x82,0x66,0x4,0x0,0x82,0x1,0x22,0x0,0x82,0x1,0x16,0x0,0x84,0x66,0xe6,0xee,0x3c,0x0,0x83,0x6,0x66,0x2,0x6e,0x82,0xe0,0x3c,0x0,0x82,0x66,0x2,0xe6,0x82,0xe0,0x2f,0x0,0x82,0x10,0xb,0x0,0x2,0x66,0x2,0x6e,0x82,0x66,0x8,0x0,0x82,0x70,0x25,0x0,0x83,0x1,0x11,0xb,0x0,0x2,0x60,0x2,0x66,0x82,0xe6,0x5,0x0,0x82,0x7,0x7,0x0,0x82,0x70,0x21,0x0,0x82,0x10,0xb,0x0,0x86,0x6,0x66,0x60,0x66,0x60,0x3b,0x0,0x86,0x6,0x0,0x66,0x0,0x60,0x3c,0x0,0x84,0x66,0x6,0x66,0x17,0x0,0x83,0x1,0x10,0x25,0x0,0x82,0x66,0x12,0x0,0x82,0x10,0x77,0x0,0x82,0x70,0x26,0x0,0x82,0x10,0x4a,0x0,0x82,0x1,0xa,0x0,0x82,0x10,0xf,0x0,0x82,0x7,0xd,0x0,0x82,0x70,0x37,0x0,0x82,0x1,0x27,0x0,0x82,0x10,0x5,0x0,0x82,0x1,0x7e,0x0,0x11,0x0,0x82,0x10,0x25,0x0,0x82,0x10,0x7e,0x0,0x4,0x0,0x82,0xa0,0x4,0x0,0x82,0x1,0x61,0x0,0x82,0x10,0xd,0x0,0x82,0xc,0x13,0x0,0x82,0x10,0x6f,0x0,0x82,0x10,0x26,0x0,0x82,0x1,0x5b,0x0,0x82,0xa0,0x23,0x0,0x82,0x1,0x12,0x0,0x82,0x1,0x2c,0x0,0x83,0x11,0x10,0x21,0x0,0x82,0xc0,0x1c,0x0,0x82,0x1,0x9,0x0,0x82,0xc0,0x54,0x0,0x82,0x10,0x36,0x0,0x82,0xc0,0x42,0x0,0x82,0x1,0x19,0x0,0x83,0x2a,0xa0,0x18,0x0,0x82,0xc0,0x13,0x0,0x82,0x1,0x10,0x0,0x84,0x2,0xa2,0xaa,0x2e,0x0,0x82,0xc,0xe,0x0,0x82,0x22,0x2,0x2a,0x82,0xa0,0x1d,0x0,0x82,0x1,0x1e,0x0,0x85,0x42,0x22,0xa2,0xa0,0x2f,0x0,0x82,0xc0,0xc,0x0,0x85,0x44,0x22,0x2a,0x20,0x3c,0x0,0x84,0x4,0x42,0xa2,0x3e,0x0,0x83,0x44,0x20,0x2,0x0,0x82,0x10,0x26,0x0,0x82,0xc,0x3a,0x0,0x82,0x10,0x8,0x0,0x82,0xc0,0x18,0x0,0x82,0x1,0x19,0x0,0x82,0xc,0x7e,0x0,0x52,0x0,0x82,0x10,0x36,0x0,0x82,0x10,0x23,0x0,0x82,0x70,0x21,0x0,0x82,0xc0,0x15,0x0,0x82,0x70,0x3e,0x0,0x83,0x7,0x77,0x1b,0x0,0x84,0x10,0x0,0xc,0x7,0x0,0x83,0x7,0x70,0x18,0x0,0x82,0x70,0x1b,0x0,0x82,0x10,0x1f,0x0,0x82,0x1,0x24,0x0,0x82,0x1,0x1a,0x0,0x82,0x1,0x33,0x0,0x82,0x1,0x7d,0x0,0x82,0xc0,0x1f,0x0,0x82,0x10,0x13,0x0,0x82,0x20,0x31,0x0,0x82,0xc,0x1e,0x0,0x82,0x1,0x36,0x0,0x82,0x70,0x1c,0x0,0x82,0x1,0x15,0x0,0x82,0x10,0x9,0x0,0x82,0x70,0x38,0x0,0x82,0x1,0xa,0x0,0x82,0xa0,0x1b,0x0,0x82,0x1,0x27,0x0,0x82,0xc0,0x17,0x0,0x83,0x11,0x10,0x3e,0x0,0x82,0x1,0x5c,0x0,0x82,0x10,0x4,0x0,0x82,0xaa,0x43,0x0,0x82,0x1,0x3,0x0,0x82,0x1,0x5,0x0,0x82,0x10,0x2e,0x0,0x82,0x7,0x12,0x0,0x82,0x10,0x2,0x0,0x82,0x70,0x20,0x0,0x84,0x10,0x0,0x1,0x5e,0x0,0x82,0x7,0x55,0x0,0x82,0x10,0x1c,0x0,0x82,0x1,0x21,0x0,0x83,0x1,0x11,0xc,0x0,0x82,0x7,0x7,0x0,0x82,0x7,0x11,0x0,0x82,0x1,0x18,0x0,0x82,0x10,0x22,0x0,0x82,0x10,0x68,0x0,0x82,0x10,0x1d,0x0,0x82,0x10,0x3a,0x0,0x82,0x7,0x6,0x0,0x82,0x1,0x7e,0x0,0x15,0x0,0x82,0x10,0x1b,0x0,0x82,0x1,0x33,0x0,0x82,0x10,0x1d,0x0,0x82,0x10,0x2a,0x0,0x82,0x10,0x48,0x0,0x82,0x10,0x2,0x0,0x82,0x1,0x4,0x0,0x82,0x7,0x7e,0x0,0x8,0x0};
char invaders[] = {/*rle:128:30*/0x41,0x0,0x82,0x2,0x2,0x22,0x87,0xb0,0x0,0xb2,0x22,0xb0,0xb,0x2,0x22,0x83,0x2b,0x0,0x3,0x22,0x2,0x0,0x3,0x22,0x2,0x0,0x82,0xb2,0x3,0x22,0x82,0xb0,0x2,0x0,0x82,0xb,0x4,0x22,0x82,0x2b,0x2,0x0,0x82,0x2,0x6,0x22,0x83,0x0,0x2,0x4,0x22,0x82,0x2b,0x3,0x0,0x82,0x2,0x4,0x22,0x82,0xb0,0x3,0x0,0x82,0xb,0x2,0x22,0x88,0x2b,0x0,0x2,0x22,0x20,0x0,0xb2,0x2,0x22,0x83,0x0,0xb2,0x2,0x22,0x2,0x0,0x3,0x22,0x2,0x0,0x82,0xb2,0x3,0x22,0x82,0xb0,0x2,0x0,0x82,0xb,0x5,0x22,0x2,0x0,0x82,0x2,0x6,0x22,0x83,0x0,0xb2,0x4,0x22,0x82,0x2b,0x3,0x0,0x5,0x22,0x82,0x20,0x4,0x0,0x2,0x22,0x84,0x2b,0x0,0xb,0x2,0x22,0x83,0x0,0xb2,0x2,0x22,0x83,0xb0,0x2,0x2,0x22,0x83,0xb0,0x0,0x3,0x22,0x2,0x0,0x82,0xb2,0x3,0x22,0x82,0x20,0x2,0x0,0x83,0xb,0xbb,0x2,0x22,0x87,0xbb,0x22,0x20,0x0,0xb2,0x2b,0x5,0xbb,0x83,0x0,0xb2,0x4,0x22,0x82,0x2b,0x2,0x0,0x82,0xb2,0x2,0x22,0x82,0x2b,0x2,0x22,0x82,0xbb,0x5,0x0,0x83,0x22,0xb0,0x2,0x0,0x8d,0xb2,0x20,0x0,0xb,0x0,0xb0,0x0,0xb,0xbb,0x22,0xb0,0x0,0x3,0xbb,0x2,0x0,0x86,0xb,0xbb,0xb0,0x0,0xbb,0x2,0x0,0x82,0xb,0x5,0xbb,0x84,0x2b,0x0,0xb,0x6,0xbb,0x84,0xb0,0xbb,0xb,0x4,0xbb,0x83,0xb0,0xb,0x2,0x22,0x5,0xbb,0x2,0x0,0x99,0xbd,0x77,0x7d,0xb2,0xb,0xdd,0xdc,0x4b,0x2b,0x87,0x77,0x74,0xbb,0x47,0x77,0xdc,0xb2,0x20,0xb8,0x77,0x7d,0xcb,0x0,0xb9,0x3,0x77,0x83,0x79,0x4b,0x2,0x0,0x82,0x97,0x4,0x77,0x86,0x7c,0xbb,0x0,0x4,0xd7,0x5,0x77,0x84,0xd4,0xbb,0xd7,0x4,0x77,0x86,0x7c,0x2,0x22,0x2b,0xb8,0x4,0x77,0x84,0x8b,0x0,0x7,0x2,0x77,0x87,0x42,0xb4,0x87,0x77,0xcb,0x2b,0x3,0x77,0x83,0x4b,0xb7,0x2,0x77,0x84,0xb2,0x2b,0x47,0x2,0x77,0x84,0x7b,0x0,0xbc,0x3,0x77,0x83,0x78,0x4b,0x2,0x0,0x82,0xc7,0x5,0x77,0x84,0x80,0x0,0xb4,0x6,0x77,0x83,0x82,0xbb,0x6,0x77,0x84,0xb2,0x22,0xb,0x5,0x77,0x84,0x7b,0x0,0x9,0x2,0x77,0x88,0x7b,0x2b,0xb7,0x77,0x7c,0xbb,0x87,0x2,0x77,0x83,0x4b,0xbd,0x2,0x77,0x84,0xc2,0x22,0x47,0x2,0x77,0x84,0x7b,0x0,0xbc,0x4,0x77,0x82,0x4b,0x2,0x0,0x82,0xc7,0x5,0x77,0x84,0x79,0x0,0xb4,0x6,0x77,0x83,0x92,0xb4,0x6,0x77,0x84,0x82,0x22,0xb7,0x5,0x77,0x82,0x79,0x2,0x0,0x2,0x77,0x84,0x74,0x2b,0xb7,0x2,0x77,0x83,0xb2,0x47,0x2,0x77,0x83,0xcb,0x24,0x2,0x77,0x84,0x7b,0x22,0x2d,0x2,0x77,0x84,0x7b,0x0,0xbc,0x4,0x77,0x82,0x4b,0x2,0x0,0x82,0xc7,0x5,0x77,0x84,0x7d,0xb,0xb4,0x6,0x77,0x83,0xbb,0x4c,0x6,0x77,0x84,0x72,0xbb,0xc7,0x5,0x77,0x82,0x79,0x2,0x0,0x86,0xc7,0x77,0x78,0x4b,0x24,0x2,0x77,0x83,0xdb,0xbd,0x2,0x77,0x83,0xd2,0x2b,0x2,0x77,0x84,0x7b,0x22,0x2c,0x2,0x77,0x84,0x7b,0x0,0xbc,0x4,0x77,0x88,0x4b,0xb0,0x0,0xc7,0x77,0xd9,0x99,0x2,0x77,0x84,0x7c,0xb,0xbc,0x2,0x77,0x82,0x78,0x2,0xbb,0x84,0x0,0xbb,0x4d,0x2,0x77,0x83,0xdb,0xbd,0x2,0x77,0x83,0xc2,0xbb,0x2,0x77,0x83,0x7b,0xb,0x2,0x77,0x82,0x7b,0x2,0x0,0x82,0xd,0x2,0x77,0x83,0x4b,0x2b,0x2,0x77,0x83,0x79,0xc,0x2,0x77,0x88,0x7a,0xbb,0x87,0x77,0x7c,0x22,0x2c,0x2,0x77,0x84,0x7b,0x0,0xb9,0x4,0x77,0x88,0xcb,0xb0,0x0,0xc7,0x77,0x90,0x0,0x2,0x77,0x84,0x7c,0xb,0x4c,0x2,0x77,0x82,0x7c,0x3,0x0,0x83,0xbb,0xa7,0x2,0x77,0x83,0xab,0xb7,0x2,0x77,0x83,0xb2,0xb4,0x2,0x77,0x83,0xc0,0xc,0x2,0x77,0x82,0x40,0x2,0x0,0x82,0x9,0x2,0x77,0x84,0x84,0x2b,0x87,0x2,0x77,0x82,0xb9,0x2,0x77,0x84,0x78,0xb2,0x47,0x2,0x77,0x83,0x42,0x2c,0x2,0x77,0x84,0x7b,0xb0,0xb9,0x4,0x77,0x88,0xc4,0xb0,0x0,0xc7,0x77,0x90,0xb,0x2,0x77,0x84,0x79,0xb,0x48,0x2,0x77,0x82,0x74,0x3,0x0,0x8f,0x2b,0x87,0x77,0x7d,0x42,0x47,0x77,0x7d,0xbb,0x48,0x77,0x7d,0xb0,0x7,0x2,0x77,0x3,0x0,0x87,0xb,0xc7,0x77,0x7a,0xb2,0xb7,0x2,0x77,0x83,0x89,0xc7,0x2,0x77,0x83,0x42,0xb7,0x2,0x77,0x83,0x42,0x24,0x2,0x77,0x84,0x7b,0xb0,0xb9,0x4,0x77,0x88,0xd4,0xb0,0x0,0xc7,0x77,0x90,0xb,0x2,0x77,0x84,0x7b,0xb,0x2d,0x2,0x77,0x95,0x7b,0x22,0xb0,0x0,0x24,0xd7,0x77,0x7a,0xbb,0x87,0x77,0x79,0x0,0xc7,0x77,0x79,0x0,0x97,0x77,0x79,0x4,0x0,0x86,0xb7,0x77,0x7d,0xb2,0xb8,0x2,0x77,0x83,0x7c,0xc7,0x2,0x77,0x83,0xc2,0xba,0x2,0x77,0x83,0x82,0x24,0x2,0x77,0x84,0x7b,0xb0,0xb9,0x4,0x77,0x88,0x7a,0xb0,0x0,0xc7,0x77,0x90,0xb,0x2,0x77,0x84,0x7b,0xb,0xa7,0x2,0x77,0x86,0x7b,0x22,0xb0,0x0,0xbc,0x2,0x77,0x83,0x72,0xbb,0x2,0x77,0x8a,0x70,0xb,0xd7,0x77,0xdb,0x0,0x87,0x77,0xd0,0x4,0x0,0x82,0x4,0x2,0x77,0x83,0x8b,0x24,0x3,0x77,0x82,0xd7,0x2,0x77,0x87,0x7b,0x2b,0x87,0x77,0x72,0xb4,0x2,0x77,0x8f,0x74,0xb0,0xb9,0x77,0x7d,0x87,0x77,0x7a,0xb0,0x0,0xc7,0x77,0x90,0xb,0x2,0x77,0x84,0x70,0xb,0xa7,0x2,0x77,0x86,0x80,0xb0,0x0,0xb,0xb8,0x2,0x77,0x83,0x82,0xbb,0x2,0x77,0x83,0x80,0x9,0x2,0x77,0x85,0x90,0x0,0xb,0xb0,0x6,0x0,0x2,0x77,0x84,0x7b,0x2b,0x87,0x5,0x77,0x87,0x7b,0x2b,0xa7,0x77,0x7c,0xbb,0x2,0x77,0x8f,0x74,0x20,0xb9,0x77,0x7d,0xc7,0x77,0x7a,0xbb,0x0,0xc7,0x77,0x40,0x4,0x2,0x77,0x84,0x70,0xb,0xa7,0x2,0x77,0x86,0x7c,0xc9,0xb0,0x2,0xb7,0x2,0x77,0x87,0x4b,0x2c,0x77,0x7d,0xb0,0xd,0x2,0x77,0x82,0xb0,0x9,0x0,0x86,0x97,0x77,0x7c,0xbb,0x2d,0x5,0x77,0x84,0x79,0x22,0x4c,0x2,0x77,0x82,0x90,0x2,0x77,0x8f,0x79,0x20,0xb9,0x77,0x7c,0x9d,0x77,0x78,0xbb,0x0,0xc7,0x77,0x40,0x9,0x2,0x77,0x84,0x70,0xb,0x87,0x4,0x77,0x84,0xcb,0x2,0xb7,0x2,0x77,0x8a,0xbb,0x47,0x77,0xd4,0x0,0xb7,0x77,0x7d,0xbb,0x9,0x0,0x82,0x7,0x2,0x77,0x83,0xb2,0x49,0x5,0x77,0x84,0x78,0x22,0xb4,0x2,0x77,0x82,0xd0,0x2,0x77,0x8f,0x7c,0x20,0xb9,0x77,0x7c,0x48,0x77,0x78,0xb2,0x0,0xc7,0x77,0x40,0xb9,0x2,0x77,0x84,0x70,0xb,0x87,0x4,0x77,0x84,0x90,0x2,0xc7,0x4,0x77,0x85,0x79,0xb0,0x0,0xc7,0x3,0x77,0x82,0x7d,0x8,0x0,0x82,0xc,0x2,0x77,0x83,0x42,0xbb,0x6,0x77,0x86,0xb2,0x2b,0xd7,0x77,0x74,0x2,0x77,0x87,0x7c,0x20,0xb9,0x77,0x78,0x49,0x2,0x77,0x87,0x42,0x0,0xc7,0x77,0x40,0xb9,0x2,0x77,0x84,0xd0,0xb4,0xd7,0x2,0x77,0x86,0x7d,0xdd,0xb0,0xb,0xd7,0x4,0x77,0x82,0xd0,0x2,0x0,0x82,0xb7,0x4,0x77,0x82,0x40,0x7,0x0,0x87,0xb,0xd7,0x77,0xd4,0xbb,0xc7,0x5,0x77,0x8e,0x42,0x22,0xb7,0x77,0x7d,0xd7,0x77,0x78,0x20,0xb4,0x77,0x7a,0xb4,0x2,0x77,0x87,0x92,0x0,0xc7,0x77,0x4b,0x2c,0x2,0x77,0x83,0xd0,0xb4,0x2,0x77,0x83,0x7c,0xb0,0x2,0x0,0x82,0xbb,0x5,0x77,0x85,0x7b,0xb2,0x20,0xd,0x4,0x77,0x82,0xd0,0x8,0x0,0x86,0xc7,0x77,0x74,0xb2,0xb7,0x5,0x77,0x84,0xc2,0x22,0xb7,0x4,0x77,0x87,0x78,0x20,0xb4,0x77,0x7a,0xbb,0x2,0x77,0x87,0xcb,0x0,0xc7,0x77,0x4b,0x28,0x2,0x77,0x83,0x80,0xbc,0x2,0x77,0x82,0x79,0x3,0x0,0x82,0xbb,0x2,0x77,0x8a,0x7c,0xc7,0x77,0x79,0x22,0x20,0xb,0xc8,0x87,0x2,0x77,0x82,0xd0,0x8,0x0,0x86,0xbc,0x77,0x78,0x4b,0xb8,0x5,0x77,0x84,0x74,0x22,0xbc,0x4,0x77,0x87,0x7d,0x20,0xb4,0x77,0x7c,0xbb,0x2,0x77,0x87,0x8b,0x0,0xc7,0x77,0x4b,0x28,0x2,0x77,0x83,0xc0,0xba,0x2,0x77,0x86,0x74,0xb2,0xb0,0x0,0x29,0x2,0x77,0x85,0xc0,0xbd,0x77,0x74,0x2,0x22,0x84,0x2b,0x0,0x4,0x2,0x77,0x82,0x40,0x8,0x0,0x82,0x4,0x2,0x77,0x83,0xcb,0x24,0x2,0x77,0x82,0x7c,0x2,0x77,0x84,0x74,0x22,0x2b,0x4,0x77,0x87,0x7d,0x20,0xb4,0x77,0x7d,0x4b,0x2,0x77,0x87,0x7b,0xb0,0xc7,0x77,0x4b,0x4d,0x2,0x77,0x83,0x90,0xb8,0x2,0x77,0x86,0xd2,0x22,0xb0,0xb,0xbd,0x2,0x77,0x86,0xbb,0x97,0x77,0x7b,0xbb,0x3,0x0,0x82,0xd,0x2,0x77,0x9,0x0,0x86,0xb,0x97,0x77,0xdb,0x2b,0x2,0x77,0x88,0x7b,0x87,0x77,0x79,0x42,0x2b,0x87,0x4,0x77,0x83,0xb0,0xb4,0x5,0x77,0x8b,0x7b,0xb0,0xc7,0x77,0xb0,0xb7,0x77,0x7d,0xb0,0xb7,0x2,0x77,0x86,0xd2,0x22,0xb0,0x0,0xb7,0x2,0x77,0x8c,0xbb,0x87,0x77,0xdb,0xbb,0x9c,0xcb,0x0,0xb7,0x77,0x74,0xa,0x0,0x8e,0xb7,0x77,0x78,0xb,0xc7,0x77,0x7c,0x4c,0x77,0x78,0x4b,0x2b,0x47,0x4,0x77,0x83,0xb0,0xb,0x5,0x77,0x8b,0x7b,0x0,0xc7,0x77,0xb0,0xb7,0x77,0x7d,0xb0,0x7,0x2,0x77,0x83,0xcb,0xb,0x2,0x0,0x85,0xb7,0x77,0x7c,0xb,0x2,0x77,0x89,0xb0,0xbc,0x77,0x79,0xbb,0xc7,0x77,0xd0,0xa,0x0,0x82,0x9,0x2,0x77,0x83,0xb0,0xbd,0x2,0x77,0x87,0xbb,0x87,0x77,0x90,0x0,0x8,0x4,0x77,0x83,0x0,0xb,0x2,0x77,0x8e,0xd8,0x87,0x77,0x74,0x0,0xc7,0x77,0x8c,0xd7,0x77,0x74,0x0,0xb7,0x2,0x77,0x82,0x4b,0x2,0x0,0x86,0xb,0x97,0x77,0xdb,0x4,0x2,0x77,0x89,0x0,0x4d,0x77,0x7b,0xb,0x77,0x7d,0x40,0xb,0x0,0x2,0x77,0x83,0xc0,0xc,0x2,0x77,0x87,0x40,0xb7,0x77,0xc0,0x0,0x9,0x4,0x77,0x8b,0x0,0xb,0x77,0x7c,0xb0,0x7,0x77,0x7c,0x0,0xc7,0x4,0x77,0x84,0x40,0x0,0xb7,0x4,0x77,0x8b,0xd0,0xb,0xd7,0x77,0xc0,0x8,0x77,0x7c,0x0,0x97,0x4,0x77,0x82,0x74,0xc,0x0,0x8e,0xc7,0x77,0x70,0xb,0xc7,0x77,0xcb,0x4,0x77,0xdb,0x0,0xb,0xc7,0x3,0x77,0x8b,0x0,0xb,0x77,0x7c,0xb0,0x8,0x77,0x7d,0x0,0xc7,0x3,0x77,0x82,0x7b,0x2,0x0,0x82,0x97,0x4,0x77,0x83,0x7b,0x4,0x2,0x77,0x87,0x90,0x7,0x77,0x7b,0x0,0xbd,0x4,0x77,0x82,0xb0,0xc,0x0,0x8b,0xb7,0x77,0x74,0x0,0x47,0x77,0xcb,0x0,0xc7,0xd9,0x2,0x0,0x82,0x47,0x3,0x77,0x8b,0xb0,0xb,0x77,0x7c,0xb0,0x9,0x77,0x7d,0x0,0x97,0x3,0x77,0x82,0x90,0x2,0x0,0x82,0xbd,0x3,0x77,0x8c,0x7d,0xc0,0x4,0x8d,0xd9,0xb0,0xbd,0xdd,0x90,0x0,0x4,0x3,0xdd,0x82,0xdb,0xd,0x0,0x8b,0xb,0xbb,0xb0,0x0,0xb,0xbb,0xb0,0x0,0xb,0xb0,0x2,0x0,0x82,0xb,0x3,0xbb,0x2,0x0,0x83,0xbb,0xb0,0x6,0x0,0x2,0xbb,0x82,0xb0,0x1d,0x0};
char Appuyez[] = {/*rle:118:36*/0x30,0x0,0x82,0x6,0x3,0x66,0x37,0x0,0x4,0x66,0x82,0x60,0x35,0x0,0x82,0x6,0x5,0x66,0xa,0x0,0x82,0x7,0x2a,0x0,0x83,0x66,0x60,0x3,0x0,0x83,0x66,0x60,0x9,0x0,0x82,0x7,0x29,0x0,0x89,0x6,0x66,0x60,0x7,0x77,0x0,0x66,0x62,0x9,0x0,0x2,0x70,0x28,0x0,0x89,0x6,0x66,0x0,0x7,0x77,0x0,0x6,0x22,0x9,0x0,0x2,0x70,0x82,0x0,0x2,0x7,0x83,0x77,0x0,0x2,0x7,0x84,0x77,0x0,0x7,0x2,0x0,0x8a,0x70,0x7,0x0,0x7,0x0,0x7,0x77,0x70,0x0,0x2,0x77,0x5,0x0,0x2,0x77,0x88,0x0,0x70,0x0,0x7,0x0,0x70,0x77,0x3,0x0,0x8a,0x66,0x60,0x0,0x77,0x7,0x70,0x0,0x22,0x20,0x7,0x0,0x8e,0x7,0x0,0x7,0x0,0x7,0x70,0x0,0x70,0x7,0x70,0x0,0x70,0x7,0x2,0x0,0x89,0x70,0x7,0x0,0x7,0x0,0x70,0x0,0x7,0x2,0x0,0x82,0x7,0x4,0x0,0x82,0x7,0x3,0x0,0x86,0x70,0x0,0x7,0x0,0x77,0x4,0x0,0x8a,0x66,0x20,0x0,0x77,0x7,0x70,0x0,0x22,0x20,0x7,0x0,0x86,0x7,0x0,0x7,0x0,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x0,0x2,0x70,0x85,0x0,0x70,0x0,0x7,0x2,0x0,0x82,0x70,0x4,0x0,0x82,0x7,0x3,0x0,0x86,0x70,0x0,0x7,0x0,0x70,0x4,0x0,0x8a,0x62,0x20,0x7,0x70,0x0,0x77,0x0,0x22,0x20,0x7,0x0,0x3,0x77,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x0,0x2,0x70,0x82,0x0,0x3,0x77,0x83,0x0,0x7,0x6,0x0,0x89,0x77,0x70,0x0,0x70,0x0,0x7,0x0,0x70,0x4,0x0,0x8a,0x62,0x20,0x7,0x70,0x0,0x77,0x0,0x22,0x20,0x7,0x0,0x82,0x70,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x7,0x2,0x0,0x83,0x70,0x0,0x2,0x70,0x83,0x0,0x70,0x3,0x0,0x82,0x7,0x7,0x0,0x88,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x4,0x0,0x84,0x22,0x20,0x7,0x3,0x77,0x84,0x0,0x22,0x20,0x6,0x0,0x82,0x7,0x3,0x0,0x2,0x7,0x8e,0x70,0x0,0x70,0x7,0x70,0x0,0x70,0x7,0x0,0x7,0x70,0x0,0x7,0x2,0x0,0x82,0x70,0x3,0x0,0x82,0x70,0x7,0x0,0x88,0x7,0x0,0x70,0x0,0x77,0x0,0x70,0x4,0x0,0x84,0x22,0x20,0x77,0x2,0x0,0x85,0x7,0x70,0x22,0x20,0x6,0x0,0x82,0x7,0x3,0x0,0x3,0x7,0x83,0x77,0x0,0x2,0x7,0x82,0x77,0x2,0x0,0x82,0x77,0x2,0x70,0x83,0x0,0x7,0x2,0x0,0x82,0x7,0x2,0x77,0x82,0x0,0x2,0x77,0x4,0x0,0x8a,0x7,0x77,0x70,0x0,0x7,0x77,0x7,0x0,0x70,0x4,0x0,0x84,0x22,0x20,0x77,0x2,0x0,0x85,0x7,0x70,0x22,0x20,0xb,0x0,0x82,0x7,0x3,0x0,0x82,0x7,0x8,0x0,0x82,0x7,0x19,0x0,0x83,0x2,0x22,0x4,0x0,0x83,0x2,0x22,0xc,0x0,0x82,0x7,0x3,0x0,0x82,0x7,0x8,0x0,0x82,0x70,0x19,0x0,0x84,0x2,0x22,0x20,0x3,0x0,0x2,0x22,0xc,0x0,0x82,0x7,0x3,0x0,0x82,0x7,0x8,0x0,0x82,0x70,0x1a,0x0,0x6,0x22,0x82,0x20,0x34,0x0,0x82,0x2,0x5,0x22,0x36,0x0,0x82,0x2,0x3,0x22,0x7e,0x0,0x7e,0x0,0x70,0x0,0x8f,0x70,0x77,0x70,0x0,0x7,0x77,0x70,0x0,0x70,0x0,0x7,0x0,0x70,0x77,0x3,0x0,0x8c,0x77,0x70,0x0,0x7,0x77,0x70,0x0,0x70,0x77,0x0,0x77,0x2,0x0,0x85,0x70,0x77,0x0,0x77,0x2,0x0,0x8b,0x7,0x77,0x70,0x0,0x70,0x77,0x70,0x0,0x7,0x77,0x2,0x0,0x2,0x77,0x82,0x0,0x2,0x7,0x82,0x70,0x5,0x0,0x8e,0x77,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x77,0x3,0x0,0xa1,0x7,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x77,0x0,0x77,0x0,0x70,0x0,0x77,0x0,0x77,0x0,0x70,0x0,0x70,0x0,0x7,0x0,0x77,0x0,0x7,0x0,0x70,0x0,0x70,0x7,0x2,0x0,0x84,0x70,0x7,0x70,0x6,0x0,0x8e,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x3,0x0,0x82,0x7,0x3,0x0,0x9a,0x70,0x0,0x7,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x2,0x0,0x82,0x7,0x2,0x0,0x83,0x70,0x7,0x7,0x0,0x8e,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x3,0x0,0x82,0x7,0x3,0x0,0x91,0x70,0x0,0x7,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x3,0x77,0x87,0x0,0x70,0x0,0x7,0x0,0x70,0x2,0x0,0x82,0x7,0x2,0x77,0x83,0x70,0x7,0x7,0x0,0x8e,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x3,0x0,0x82,0x7,0x3,0x0,0x92,0x70,0x0,0x7,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x3,0x0,0x86,0x70,0x0,0x7,0x0,0x70,0x2,0x0,0x82,0x7,0x3,0x0,0x82,0x7,0x7,0x0,0x8e,0x77,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x77,0x0,0x70,0x3,0x0,0x96,0x7,0x0,0x7,0x0,0x70,0x0,0x7,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x3,0x0,0x89,0x70,0x0,0x7,0x0,0x70,0x0,0x70,0x7,0x3,0x0,0x82,0x7,0x7,0x0,0x8e,0x70,0x77,0x70,0x0,0x7,0x77,0x70,0x0,0x7,0x77,0x7,0x0,0x70,0x4,0x0,0x95,0x77,0x70,0x0,0x7,0x77,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x70,0x0,0x7,0x2,0x77,0x88,0x0,0x70,0x0,0x7,0x0,0x7,0x77,0x2,0x0,0x2,0x77,0x83,0x70,0x7,0x7,0x0,0x82,0x70,0x3a,0x0,0x82,0x70,0x3a,0x0,0x82,0x70,0x7e,0x0,0x2f,0x0};

//===============================================================================================

// char song[] = "Jicehel:b=100:4g#4,8a#4,8b4,4a#4,4g#4,4g#4,4g#4,8a#4,8b4,4a#4,4g#4,4g#4,4g4,4g#4,4a#4,4g#4,8a#4,8b4,4a#4,4g#4,4a#4,4g,4a#4,b4,8g4,8a4,4c#4,8b4,4c#4,8f#4,4c#4,8a#4,a#4,16a#4,a#4,8a#4,a#4,8a#4,8g#4,8f#4,8c#4,2d#4,8a#4,a#4,8a#4,a#4,8a#4,8g#4,f#4,8c#4,d#Jicehel:d=6,o=6,b=90:g#5,16a#5,16b5,4a#5,4g#5,4a#5,4d#,4a#5,g#5,16a#5,16b5,4a#5,4g#5,4g#5,4g5,4g#5,4a#5,4g#5,16a#5,16b5,4a#5,4g#5,4a#5,4d#,4a#5,b5,16c#4,16d#4,c#4,b5,c#4,f#4,4c#4,16a#5,a#.,16a#5,a#.,16a#5,a#.,16a#5,16g#5,16f#5,16c#5";
char song[] = "Jicehel:d=4,o=6,b=125:1p,8d,8d#,8d,8c#,8d,8c#,8e,8c#,8d,8d#,8e,8f#,8g#,8a,8a5,8g#5,8c5,8d#5,8f5,8e5,8d#5,8d5,4c#5,4p,4a,2p,8a#5,8f#5,8e,8p,4d#,2d,8b4,8f#5,8e5,8p,4p,4d#,2d,8b4,8f#5,8d#,8f#,2p,2p,4g5,8g5,8p,4g5,8g5,2g5,4g5,2g5,2p,4g5,8g5,8p,4g5,8p,4g5,2g5,2g5,4g5"; 
char song2[] = "Gameover:d=4,o=4,b=200:8c5,4p,8g4,4p,4e4,6a4,6b4,6a4,6g#4,6a#4,6g#4,4g4,4f4,2g4";

//define variables


//===========
// invaders variables

	int invader_speed;
	int nb_invaders;
	int frame;      			// We'll use 2 frames 0 and 1
	int first_column
	int last_column;
	int delay_move_invaders
	int delay_invader_shot;


//===========
// invaders shots variables

	int invader_next_shot;
	int invader_shoots_done;
	int invader_shot_delay;
	int timer_invader_shot_move_delay;

//===========
// player variables

	int player_speed;
	int nb_life = 3;
	
	
//===========
// shots variables

	int next_shot;
	int timer_cooldown;
	int shoots_done;
	int timer_shot_delay;


//===========
// game variables

	int y_endline;
	int key;
	int score;
	int newl;
	
//===========
// bunkers

	char bunker1[8][12];
	char bunker2[8][12];
	char bunker3[8][12];


// Titlescreen

Void Titlescreen(){

	clearscreen();
	setpalette(6 ,0xe8c2);  // original: 0xff20   rouge titre: 0xe8c2
	setpalette(7 ,0xff20);  // original: 0xddcb   jaune titre: 0xff20
	putimagerle(invaders,1,15,128,30);
	putimagerle(Appuyez,6,60,118,36);
	int Startgame = 0;
	while(Startgame == 0){
		key = getKey();

    	// test if the player try to shoot
		if (key & KEY_A) {
			Startgame = 1;
			clearscreen();
			setpalette(6 ,0x49ea);  
			setpalette(7 ,0xddcb); 
			while (key & KEY_A) {
				key = getKey();
			}
			stoprtttl();
		}
	} 
}

void delay(int n){
    settimer(1, n);
    while(gettimer(1)){
        if(key == 0)
            key = getkey();
    }
}

	
// Clear the shot then it goes out of the screen

void clear_shot(int shot) {
	spritesetvalue(shot, S_LIVES, 0);
	--shoots_done;
	settimer( timer_ship_shot, 0 );
};


// Clear the shot then it goes out of the screen

void clear_invader_shot(int shot) {
	spritesetvalue(shot, S_LIVES, 0);
	--invader_shoots_done;
};



// Manage the collision of a invader shot with something

void invader_shot_hit(int n) {
	
	// gotoxy(0,2); puts("n:");putn(n); puts("    ");
	// gotoxy(10,2); puts("c: "); putn(spritegetvalue(n,S_COLLISION)); puts("    "); 
	int hitted = spritegetvalue(n, S_COLLISION);
	
	if ((hitted >= sprite_bunkers) && (hitted <= sprite_bunkers +2)) {
		int shootX = spritegetvalue(n, S_X);
		int shootY = spritegetvalue(n, S_Y);
		int bunkerX = spritegetvalue(hitted ,S_X);
		int bunkerY = spritegetvalue(hitted ,S_Y);
		int TestX = shootX - bunkerX;
		int TestY = shootY - bunkerY;
		int TestL = 4;
		int LeftB = 0;
		int RightB = 1;
			
		if (TestX < 0) LeftB = 0;
		if (TestX > bunker_w) RightB = 0;			
		
		if (TestY < 0) {
			TestL = TestL + TestY;
			TestY = 0;
		}
			
		if (TestY > (bunker_h - 4)) {
			TestL = bunker_h - TestY;
		}
		
		// Test collision with bunker1
		if (hitted == sprite_bunkers) {

			//			gotoxy(0,1); puts("n:");putn(x); puts("    ");
			//			gotoxy(10,1); puts("n2: "); putn(y); puts("    "); 

			for (int k = TestY; k < TestY + TestL; k++) {
				if ((bunker1[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker1[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker1[l/2][k-1] = 0x0; 
							bunker1[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker1[l/2][k+1] = 0x0; 
							clear_invader_shot(n);
						}
					} // end for l
				} // end for k
			}	  
		}  // end test of collision with bunker1	

			
		// Test collision with bunker 2
		if (hitted == sprite_bunkers + 1) {
			
			for (int k = TestY; k < TestY + TestL; k++) {
				if ((bunker2[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker2[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker2[l/2][k-1] = 0x0; 
							bunker2[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker2[l/2][k+1] = 0x0; 
							clear_invader_shot(n);
						}
					} // end for l
				} // end for k
			}							  
		}  // end test of collision with bunker2			

	
		// Test collision with bunker 3
		if (hitted == sprite_bunkers + 2) {
			
			for (int k = TestY; k < TestY + TestL; k++) {
				if ((bunker3[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker3[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker3[l/2][k-1] = 0x0; 
							bunker3[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker3[l/2][k+1] = 0x0; 
							clear_invader_shot(n);
						}
					} // end for l
				} // end for k
			}							  
		}  // end test of collision with bunker3			
	
	} // end of collision test with bunkers
	

	
	if (hitted == sprite_player){
		int life_player = spritegetvalue(hitted, S_LIVES);
		if (life_player > 0) {
			drawparticle((spritegetvalue(hitted, S_X) + 0.3 * player_w ), (spritegetvalue(hitted, S_Y) + 0.3 * player_h ), random(3)+1);
			--life_player;
			spritesetvalue(hitted, S_LIVES, life_player);
			
			//explosion
			for(int k = 0; k < 400; k++){
					tone(50 + 30*(random(8)+1),5*(random(10)+1)); 
			}
			
			if (life_player > 0){
				player_speed = 0;
				spritesetvalue(sprite_player, S_HEIGHT, 0);

				for(int s = sprite_shot; s < (sprite_shot + max_shot); s++) {
					clear_shot(s);
				}
				
				invader_shoots_done = 0;
				for(int s = sprite_invaders_shot; s < (sprite_invaders_shot + max_invader_shot); s++) {
					clear_invader_shot(s);
				}
				
				shoots_done = 0;
				invader_shoots_done = 0;

				delay(1000);
				spritesetvalue(sprite_player, S_HEIGHT, player_h);
				spritesetvalue(sprite_player, S_X, player_init_x);
				spritesetvalue(sprite_player, S_Y, player_y);
				
	    	}
		
			clear_invader_shot(n);
			
		} // end of test of number of invader's keeping lives
		
	} // end of test that the hitted sprite is the player ship
	
}; // end shot_hit



// Invader shot add

void add_invader_shot(int x, int y) {	
	for (int s = sprite_invaders_shot; s < (sprite_invaders_shot + max_invader_shot); s++) {
		if (spritegetvalue(s, S_LIVES) == 0) invader_next_shot = s;
	} // end for
	
	if (invader_next_shot >= sprite_invaders_shot) {
		putsprite(invader_next_shot, (x + (invader_w / 2)), (y + invader_h));	
		spritesetvalue(invader_next_shot, S_LIVES, 1);
		tone(1500, 15);
		++invader_shoots_done;
	}
};



// Manage the collision of a player shot with something

void shot_hit(int n) {

	int hitted = spritegetvalue(n, S_COLLISION);
	
	if ((hitted >= sprite_bunkers) && (hitted <= sprite_bunkers +2)) {
		int shootX = spritegetvalue(n, S_X);
		int shootY = spritegetvalue(n, S_Y);
		int bunkerX = spritegetvalue(hitted ,S_X);
		int bunkerY = spritegetvalue(hitted ,S_Y);
		int TestX = shootX - bunkerX;
		int TestY = shootY - bunkerY;
		int TestL = 4;
		int LeftB = 0;
		int RightB = 1;
			
		if (TestX < 0) LeftB = 0;
		if (TestX > bunker_w) RightB = 0;			
		
		if (TestY < 0) {
			TestL = TestL + TestY;
			TestY = 0;
		}
			
		if (TestY > (bunker_h - 4)) {
			TestL = bunker_h - TestY;
		}
		
		// Test collision with bunker1
		if (hitted == sprite_bunkers) {

			//			gotoxy(0,1); puts("n:");putn(x); puts("    ");
			//			gotoxy(10,1); puts("n2: "); putn(y); puts("    "); 

			for (int k = TestY + TestL; k > TestY; k--) {
				if ((bunker1[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker1[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker1[l/2][k-1] = 0x0; 
							bunker1[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker1[l/2][k+1] = 0x0; 
							clear_shot(n);
						}
					} // end for l
				} // end for k
			}	  
		}  // end test of collision with bunker1	

			
		// Test collision with bunker 2
		if (hitted == sprite_bunkers + 1) {
			
			for (int k = TestY + TestL; k > TestY; k--) {
				if ((bunker2[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker2[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker2[l/2][k-1] = 0x0; 
							bunker2[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker2[l/2][k+1] = 0x0; 
							clear_shot(n);
						}
					} // end for l
				} // end for k
			}							  
		}  // end test of collision with bunker2			

	
		// Test collision with bunker 3
		if (hitted == sprite_bunkers + 2) {
			
			for (int k = TestY + TestL; k > TestY; k--) {
				if ((bunker3[ (TestX + 1 * LeftB) / 2 ][k] > 0) || (bunker3[(TestX + 1 * RightB)/2 ][k] > 0)) {
					for (int l =  TestX - 1; l < TestX + 1; l++) {	  
	       				if ((l >= 0) && (l < bunker_w)) {
							//explosion
							for(int i = 0; i < 200; i++){
								tone(20 + 10*(random(8)+1),3*(random(10)+1)); 
							}
							if ((k > 0) && (random(3) > 1)) bunker3[l/2][k-1] = 0x0; 
							bunker3[l/2][k] = 0x0;
							if ((k < bunker_h) && (random(3) > 1)) bunker3[l/2][k+1] = 0x0; 
							clear_shot(n);
						}
					} // end for l
				} // end for k
			}							  
		}  // end test of collision with bunker3			
	
	} // end of collision test with bunkers
	
	
	if ((hitted >= first_column + sprite_invader) && (hitted <= last_column + sprite_invader)){
		int life_invader = spritegetvalue(hitted, S_LIVES);
		
		//explosion
		for(int k = 0; k < 400; k++){
			tone(500 + 30*(random(8)+1),3*(random(10)+1)); 
		}
		if (life_invader > 0) {
			if (life_invader >= 4) score = score + 10;
			if ((life_invader == 2) || (life_invader == 3)) score = score + 30;
			if (life_invader == 1) score = score + 50;
			nb_invaders--;
			settimer( timer_ship_shot, 0 );
			drawparticle((spritegetvalue(hitted, S_X) + 0.5 * invader_w ), (spritegetvalue(hitted, S_Y) + life_invader * (invader_h + invader_space_h)), random(3)+1);
			--life_invader;
			spritesetvalue(hitted, S_LIVES, life_invader);
			
			if (life_invader > 0){
				 int height = life_invader * (invader_h + invader_space_h) - invader_space_h
		     	spritesetvalue(hitted, S_HEIGHT, life_invader * (invader_h + invader_space_h) - invader_space_h);     
	    	} else {
				spritesetvalue(hitted, S_HEIGHT,0);
				if ((hitted == first_column) && (hitted <= last_column)) {
					int last = hitted;
					int found = 0;
					while((last <= last_column) && (found == 0)) {
						// gotoxy(0,2); puts("last:");putn(last); puts("    ");
						// gotoxy(10,2); puts("found: "); putn(found); puts("    "); 
						last++;
						if (spritegetvalue(last, S_LIVES) > 0) {
							found = 1;
							first_column = last;
						}
					}
				} // end of treatment when coulmn have no more live
				
				if ((hitted == last_column) && (hitted >= first_column)) {
					int last = hitted;
					int found = 0;
					while((last >= first_column) && (found == 0)) {
						last--;
						if (spritegetvalue(last, S_LIVES) > 0) {
							found = 1;
							last_column = last;
						}
					} // end while
				} // end of if
				
			} // end else
			clear_shot(n);
			
		} // end of test of number of invader's keeping lives
		
	} // end of test that the hitted sprite is an invader
	
}; // end shot_hit


// Ship shot add

void add_ship_shot() {					
	if (next_shot >= sprite_shot) {
		putsprite(next_shot, (spritegetvalue(sprite_player, S_X) + (player_w / 2)), (spritegetvalue(sprite_player, S_Y) - 5));	
		spritesetvalue(next_shot, S_LIVES, 1);
		tone(2000, 30);
		++shoots_done;
	}
};



// Manage the collisions of invaders (with cannon's player ship)
void invader_collision(int n) {
	
	int hitted = spritegetvalue(n, S_COLLISION);
	
	if (hitted == sprite_player){

		int life_player = spritegetvalue(hitted, S_LIVES);
		
		if (life_player > 0) {
			drawparticle((spritegetvalue(hitted, S_X) + 0.3 * player_w ), (spritegetvalue(hitted, S_Y) + 0.3 * player_h ), random(3)+1);
			drawparticle((spritegetvalue(n, S_X) + 0.5 * invader_w ), (spritegetvalue(n, S_Y) + spritegetvalue(n, S_LIVES) * (invader_h + invader_space_h)), random(3)+1);
			--life_player;
			spritesetvalue(hitted, S_LIVES, life_player);
			
			//explosion
			for(int k = 0; k < 400; k++){
				tone(50 + 30*(random(8)+1),5*(random(10)+1)); 
				tone(500 + 30*(random(8)+1),3*(random(10)+1)); 
			}
			
			if (life_player > 0){
				player_speed = 0;
				spritesetvalue(sprite_player, S_HEIGHT, 0);

				for(int s = sprite_shot; s < (sprite_shot + max_shot); s++) {
					clear_shot(s);
				}
				
				invader_shoots_done = 0;
				for(int s = sprite_invaders_shot; s < (sprite_invaders_shot + max_invader_shot); s++) {
					clear_invader_shot(s);
				}
				
				shoots_done = 0;
				invader_shoots_done = 0;

				delay(1000);
				newl = 1;   // start a new level
				
	    	}
			
		} // end of test of number of invader's keeping lives
		
	} // end of test that the hitted sprite is the player ship
	
}; // end of collision management with an invader ship



// bruit soucoupe: // tone(30,500);

//===============================================================================================
// initialisation of values and sprites

void new_level(){
	// init invaders
	frame = 0;
	invader_speed = invader_init_speed;
    int i = sprite_invader;
	for(int col = 0; col < invader_columns; col++ ){
			int x = invader_x + col * (invader_w + invader_space_w);
			spritesetvalue(i, S_WIDTH, invader_w);
			spritesetvalue(i, S_HEIGHT,invader_lines * (invader_h + invader_space_h)-invader_space_h);
			spritesetvalue(i, S_LIVES, invader_lines);
			spritesetvalue(i, S_ON_COLLISION, invader_collision);
			getsprite(i, invader);
			spritesetvalue(i, S_X, x);
			spritesetvalue(i, S_Y, invader_y);
			i++;
	}
	memcpy  (bunker1,bunker_spr, 96);
	memcpy  (bunker2,bunker_spr, 96);
	memcpy  (bunker3,bunker_spr, 96);
	nb_invaders = invader_columns * invader_lines;
	first_column = 0;
	last_column = invader_columns - 1;
	y_endline = screen_height - invader_h - 15;
	delay_move_invaders = 200;
	delay_invader_shot = 800;
	timer_invader_shot_move_delay = 20;
	// playrtttl();
	newl = 0;
}


void init(){
	
	new_level();
	
	// init bunkers
	for(int b = 0; b < 3; b++) {
		if (b==0) getsprite(b + sprite_bunkers, bunker1);
		if (b==1) getsprite(b + sprite_bunkers, bunker2);
		if (b==2) getsprite(b + sprite_bunkers, bunker3);
		spritesetvalue(b + sprite_bunkers, S_WIDTH, bunker_w);
		spritesetvalue(b + sprite_bunkers, S_HEIGHT, bunker_h);
	} 
	
	// init player
	player_speed = 0;
	spritesetvalue(sprite_player, S_X, player_init_x);
	spritesetvalue(sprite_player, S_Y, player_y);
	spritesetvalue(sprite_player, S_WIDTH,  player_w);
	spritesetvalue(sprite_player, S_HEIGHT, player_h);
	spritesetvalue(sprite_player, S_LIVES, nb_life);
	getsprite(sprite_player,player);
	
	
	// init player shots
	shoots_done = 0;
	setpalette(7, 0xe0e3); 
	for(int s = sprite_shot; s < (sprite_shot + max_shot); s++) {
		spritesetvalue(s, S_WIDTH, 2);
		spritesetvalue(s, S_HEIGHT,4);
		spritesetvalue(s, S_LIVES,0);
		spritesetvalue(s, S_ON_COLLISION, shot_hit);
		spritesetvalue(s, S_ON_EXIT_SCREEN, clear_shot);
		getsprite(s, shot_beam);
 
	}
	timer_cooldown = 2000;
	timer_shot_delay = 20;
	setpalette(7, 0xddcb);
	
	// init invader shots
	invader_shoots_done = 0;

	for(int s = sprite_invaders_shot; s < (sprite_invaders_shot + max_invader_shot); s++) {
		spritesetvalue(s, S_WIDTH, 2);
		spritesetvalue(s, S_HEIGHT,4);
		spritesetvalue(s, S_LIVES,0);
		spritesetvalue(s, S_ON_COLLISION, invader_shot_hit);
		spritesetvalue(s, S_ON_EXIT_SCREEN, clear_invader_shot);
		getsprite(s, invader_shot_beam);
	}
	
	// init particle
	setparticle(8, 4, 2000);
	setemitter(250, 210, 20, 10);
	
	
	// init timers
	setframerate(30);
	settimer( timer_invaders, delay_move_invaders);
	settimer( timer_invaders_shot, delay_invader_shot);
	settimer( timer_shot_move, timer_shot_delay);
	settimer( timer_invader_shot_move, timer_invader_shot_move_delay);
	
}	



// ========================================================
// Step procedure to make the game evolve between each draw

void step(){	
	
	if (newl == 1) new_level();

	// manage invaders
	
	if (gettimer( timer_invaders  ) <= 0 ) {    		// If invaders timer time reach
		    char change_row = 0;
			frame = 1 - frame;							// Change frame of invader to show
			int max_x = spritegetvalue(last_column,  S_X) + invader_speed;			//
 		    int min_x = spritegetvalue(first_column, S_X) + invader_speed;
 
			// Test if actives invaders reach rigth side
	   		if (max_x > screen_width - (invader_w + invader_init_speed)) {
				invader_speed = -invader_init_speed;
				change_row = 1;
			}

			// Test if actives invaders reach left side
 	   		if (min_x <= 0) {
				invader_speed =  invader_init_speed;
				change_row = 1;
				invader_speed =  invader_init_speed;
			}
								
			int reset_invalders = 0;
			if ((change_row > 0) && (spritegetvalue(first_column, S_Y) > y_endline)) reset_invalders = 1;
					
			for( int col = sprite_invader + first_column; col <= (sprite_invader + last_column); col++ ){
				int x, y;
				if (reset_invalders == 1) {
					x = invader_x + col * (invader_w + invader_space_w);
					y = invader_y
				} else {
					if (spritegetvalue(col, S_LIVES) > 0) {
						x = spritegetvalue(col, S_X) + invader_speed;
						y = spritegetvalue(col, S_Y) + change_row * speed_invader_down;
					}
				}
				// store value in the sprite
				spritesetvalue(col, S_X, x);
				spritesetvalue(col, S_Y, y);
			}
	

	// reset the invader timer
	settimer( timer_invaders, delay_move_invaders);						

	}
	// ============ End of invader manage part
	
	// manage ship shots
	if (gettimer( timer_shot_move ) <= 0 ) {    		// If ship shot timer time reach
		int shot, shot_live;
		setpalette(7 ,0xe0e3); 
		for(int s = 0; s < max_shot; s++) {
			int shot_y;
			shot = s + sprite_shot;
			shot_live = spritegetvalue(shot, S_LIVES);
			if ( shot_live > 0) {
				shot_y = spritegetvalue(shot, S_Y) - shot_speed;
				if (shot_y < 10) {
					clear_shot(shot);
				} else {
					spritesetvalue(shot, S_Y, shot_y);
					getsprite(shot, shot_beam + frame * 4); 
				} // end of shot_y test
			}
			setpalette(7 ,0xddcb);
		} // End of for
	
	// reset the ship shot timer
	settimer( timer_shot_move, timer_shot_delay);					

	} // End of test of ship shot test
	
	// manage invader shots
	if (gettimer( timer_invader_shot_move ) <= 0 ) {    		// If ship shot timer time reach
		int shot, shot_live;
		for(int s = 0; s < max_invader_shot; s++) {
			int shot_y;
			shot = s + sprite_invaders_shot;
			shot_live = spritegetvalue(shot, S_LIVES);
			if ( shot_live > 0) {
				shot_y = spritegetvalue(shot, S_Y) + invader_shot_speed;
				if (shot_y > screen_height) {
					clear_invader_shot(shot);
				} else {
					spritesetvalue(shot, S_Y, shot_y);
					getsprite(shot, invader_shot_beam + frame * 4); 
				} // end of shot_y test
			}
		} // End of for
	
	// reset the invaders shot timer
	settimer( timer_invader_shot_move, timer_invader_shot_move_delay);					

	} // End of test of ship shot test
	
	if (nb_invaders == 0) {
		stoprtttl();
		new_level();
	}
	
	// manage invaders shots
	if ((gettimer( timer_invaders_shot ) <= 0) && (invader_shoots_done < max_invader_shot) ) {    		// If invaders timer time reach
		int selected_col = random(last_column - first_column) + first_column;
		int x = spritegetvalue(selected_col, S_X) + 0.5 * invader_w;
		int y = spritegetvalue(selected_col, S_Y) + 0.5 * invader_h + random(spritegetvalue(selected_col, S_LIVES)) * invader_h;
		add_invader_shot(x, y);
		settimer( timer_invaders_shot, delay_invader_shot);
	}
	
	// manage keyboard inputs
	key = getKey();
	if (key & KEY_RIGHT) { 
		player_speed = player_speed + 3 ;
	} else if (key & KEY_LEFT) { 
		player_speed = player_speed - 3 ;
	}  
	
	// manage limits 
    int player_x = spritegetvalue(sprite_player, S_X) + player_speed;
    if (player_x > (screen_width - player_w) ) player_x = screen_width - player_w;
    if (player_x < 0)   player_x =  0;

	spritesetvalue(sprite_player, S_X, player_x);

    // test if the player try to shoot
	if (key & KEY_A) {
		if ((shoots_done < max_shot) && ( gettimer( timer_ship_shot ) <= 0 )) {
					settimer( timer_ship_shot, timer_cooldown );
					for(int s = sprite_shot; s < (sprite_shot + max_shot); s++) {
						if (spritegetvalue(s, S_LIVES) == 0) next_shot = s;
					} // end for
					add_ship_shot();
		} // end test of timer for the cooldown time between two shots when max of shot isn't reach
	} // end of key test of the button A

	// reset speed (no inertia)
    player_speed = 0;

	// ============ End of keyboard inputs manage part
	
};
// ============ End of step calculation procedure


// ========================================================
// Draw procedure

void draw(){
	
	clearscreen();
	
	// Draw background
	
	putimagerle(background,0,0,128,128)

	// Display game infos
	gotoxy(0,0); puts("Pts:");putn(score); puts("    ");
	gotoxy(10,0); puts("     ");
	// gotoxy(0,15);puts("nb_invaders: ");putn(nb_invaders);puts("    ");
	for(int v = 0; v < spritegetvalue(sprite_player, S_LIVES); v++) {
			putimage(player, 88 + v*(player_w + 1), 1, player_w, player_h);
	}
	
	if (spritegetvalue(sprite_player, S_LIVES) == 0) {			
		// Manage gameOver to add here
		// For the moment, just restart
		stoprtttl();
		loadrtttl(song2, 1);
		playrtttl();
		delay(3000);
		stoprtttl();
		init();	
	}
		
	// draw invaders

	for( int col = first_column; col <= last_column; col++ ){
		int x = spritegetvalue(col + sprite_invader, S_X);
		int y = spritegetvalue(col + sprite_invader, S_Y);
		getsprite(col + sprite_invader, invader + frame * 192);
//		putsprite(col + sprite_invader, x, y);
	}
	
	// draw bunkers
	putsprite(sprite_bunkers, 10, y_bunkers );
	putsprite(sprite_bunkers +1, (screen_width - bunker_w + 2) / 2, y_bunkers );
	putsprite(sprite_bunkers +2, (screen_width - bunker_w - 10),     y_bunkers );
	
	// draw ship of the player
//    putsprite(sprite_player, spritegetvalue(sprite_player, S_X), spritegetvalue(sprite_player, S_Y));   // draw the sprite of the ship played

    delayredraw(); 									// wait until the frame is drawn. 
}
// ============ End of draw procedure


// ========================================================
// Main procedure

void main(){
	
	// load music
	loadrtttl(song, 1);
	Titlescreen();
	init();
	while(1){		
       step();
       draw();		
	}
}
// ============ End of main procedure
